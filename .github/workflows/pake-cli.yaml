name: Build App With Pake CLI
on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - 'windows-latest'
          - 'macos-latest'
          - 'ubuntu-24.04'
      url:
        description: 'URL'
        required: true
      name:
        description: 'Name, English, Linux no capital'
        required: true
      icon:
        description: 'Icon, Image URL, Optional'
        required: false
      width:
        description: 'Width, Optional'
        required: false
        default: '1200'
      height:
        description: 'Height, Optional'
        required: false
        default: '780'
      fullscreen:
        description: 'Fullscreen, At startup, Optional'
        required: false
        type: boolean
        default: false
      targets:
        description: 'Targets, Linux only, Optional'
        required: false
        default: 'deb'
        type: choice
        options:
          - 'deb'
          - 'appimage'
          - 'rpm'
      config_json:
        description: 'All configs in one JSON'
        required: false

jobs:
  build:
    name: ${{ inputs.platform }}
    runs-on: ${{ inputs.platform }}
    strategy:
      fail-fast: false

    steps:
      - name: Parse config
        id: parse
        shell: bash
        run: |
          echo '${{ inputs.config_json }}' > config.json
          echo "UPLOAD_URL=$(jq -r .UPLOAD_URL config.json)" >> $GITHUB_ENV               
          echo "DOWNLOAD_URL=$(jq -r .DOWNLOAD_URL config.json)" >> $GITHUB_ENV
          echo "TASK_ID=$(jq -r .TASK_ID config.json)" >> $GITHUB_ENV
          echo "CALLBACK_URL=$(jq -r .CALLBACK_URL config.json)" >> $GITHUB_ENV

      - name: config_json (Windows)
        if: inputs.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "UPLOAD_URL: $env:UPLOAD_URL"
          Write-Host "CALLBACK_URL: $env:CALLBACK_URL"
          Write-Host "DOWNLOAD_URL: $env:DOWNLOAD_URL"


      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Rust for ubuntu-24.04
        if: inputs.platform == 'ubuntu-24.04'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - name: Install Rust for windows-latest
        if: inputs.platform == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc

      - name: Install Rust for macos-latest
        if: inputs.platform == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-apple-darwin

      - name: Install dependencies (ubuntu only)
        if: inputs.platform == 'ubuntu-24.04'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libsoup3.0-dev libdbus-1-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.1

      - name: Install pake-cli local
        shell: bash
        run: |
          echo "install pake on local"
          npm install pake-cli

      - name: Rust cache restore
        uses: actions/cache/restore@v3
        id: cache_store
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}

      - name: Install dependencies
        run: |
          npm install shelljs
          npm install axios

      - name: Build with pake-cli
        run: |
          node ./script/build_with_pake_cli.js
        env:
          URL: ${{ inputs.url }}
          NAME: ${{ inputs.name }}
          ICON: ${{ inputs.icon }}
          HEIGHT: ${{ inputs.height }}
          WIDTH: ${{ inputs.width }}
          FULLSCREEN: ${{ inputs.fullscreen }}
          TARGETS: ${{ inputs.targets }}
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ inputs.platform }}.zip
          path: node_modules/pake-cli/output/*
          retention-days: 3

      - name: Rust cache store
        uses: actions/cache/save@v3
        if: steps.cache_store.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}

      - name: List output files
        if: inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest'
        run: ls -lh node_modules/pake-cli/output/

      - name: List output files (Windows)
        if: inputs.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path node_modules/pake-cli/output | Format-List
        shell: pwsh

      - name: Upload file via curl and extract URL (Linux/macOS)
        if: inputs.platform == 'macos-latest' || inputs.platform == 'ubuntu-24.04'
        shell: bash
        run: |
          if [[ "${{ inputs.platform }}" == "macos-latest" ]]; then
            EXT="dmg"
          elif [[ "${{ inputs.platform }}" == "ubuntu-24.04" ]]; then
            EXT="deb"
          else
            EXT="zip"
          fi

          FILE="node_modules/pake-cli/output/${{ inputs.name }}.${EXT}"
          FILENAME="${{ inputs.platform }}-${{ github.run_id }}.${EXT}"

          echo "Uploading $FILE to $UPLOAD_URL"
          RESPONSE=$(curl -s -X POST "$UPLOAD_URL" \
            -F "file=@$FILE;filename=$FILENAME" \
            -H "Expect:")

          echo "Server response: $RESPONSE"

          CODE=$(echo "$RESPONSE" | jq -r '.code')
          if [[ "$CODE" == "0" ]]; then
            FILE_URL=$(echo "$RESPONSE" | jq -r '.url')
            echo "Upload succeeded: $FILE_URL"
            echo "FILE_URL=$FILE_URL" >> $GITHUB_ENV
          else
            echo "Upload failed"
            exit 1
          fi
      # Windows 平台上传逻辑
      - name: Upload file via curl and extract URL (Windows)
        if: inputs.platform == 'windows-latest'
        shell: pwsh
        run: |
          $ext = "msi"
          $file = "node_modules/pake-cli/output/${{ inputs.name }}.$ext"
          $filename = "${{ inputs.platform }}-${{ github.run_id }}.$ext"
          
          Write-Host "Uploading $file to $env:UPLOAD_URL"
          if (-Not (Test-Path $file)) {
            Write-Error "File not found: $file"
            exit 1
          }
          $response = curl.exe -s -X POST "$env:UPLOAD_URL" `
            -F "file=@$file;filename=$filename" `
            -H "Expect:"

          Write-Host "Server response: $response"

          $parsed = $response | ConvertFrom-Json
          if ($parsed.code -eq 0) {
            Write-Host "Upload succeeded: $($parsed.url)"
            echo "FILE_URL=$($parsed.url)" >> $env:GITHUB_ENV
          } else {
            Write-Error "Upload failed"
            exit 1
          }

      # Linux/macOS 用 curl
      - name: Notify backend (Linux/macOS)
        if: inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest' && env.CALLBACK_URL
        shell: bash
        run: |
          curl -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "task_id=$TASK_ID" \
            --data-urlencode "run_id=${{ github.run_id }}" \
            --data-urlencode "download_url=$FILE_URL"

      # Windows 用 PowerShell
      - name: Notify backend (Windows)
        if: inputs.platform == 'windows-latest' && env.CALLBACK_URL
        shell: pwsh
        run: |
          $CALLBACK_URL = $env:CALLBACK_URL

          $body = @{
            task_id     = "$env:TASK_ID"
            run_id      = "${{ github.run_id }}"
            download_url = "$env:FILE_URL"
          }
          Invoke-RestMethod -Uri "$CALLBACK_URL" -Method POST -ContentType "application/x-www-form-urlencoded" -Body $body
