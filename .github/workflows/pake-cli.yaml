name: Build App With Pake CLI
on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - 'windows-latest'
          - 'macos-latest'
          - 'ubuntu-24.04'
      url:
        description: 'URL'
        required: true
      name:
        description: 'Name, English, Linux no capital'
        required: true
      icon:
        description: 'Icon, Image URL, Optional'
        required: false
      width:
        description: 'Width, Optional'
        required: false
        default: '1200'
      height:
        description: 'Height, Optional'
        required: false
        default: '780'
      fullscreen:
        description: 'Fullscreen, At startup, Optional'
        required: false
        type: boolean
        default: false
      targets:
        description: 'Targets, Linux only, Optional'
        required: false
        default: 'deb'
        type: choice
        options:
          - 'deb'
          - 'appimage'
          - 'rpm'
      task_id:
        description: 'Task ID for tracking'
        required: false
      callback_url:
        description: 'Callback URL to notify when done'
        required: false

jobs:
  build:
    name: ${{ inputs.platform }}
    runs-on: ${{ inputs.platform }}
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Rust for ubuntu-24.04
        if: inputs.platform == 'ubuntu-24.04'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - name: Install Rust for windows-latest
        if: inputs.platform == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc

      - name: Install Rust for macos-latest
        if: inputs.platform == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-apple-darwin

      - name: Install dependencies (ubuntu only)
        if: inputs.platform == 'ubuntu-24.04'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libsoup3.0-dev libdbus-1-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.1

      - name: Install pake-cli local
        shell: bash
        run: |
          echo "install pake on local"
          npm install pake-cli

      - name: Rust cache restore
        uses: actions/cache/restore@v3
        id: cache_store
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}

      - name: Install dependencies
        run: |
          npm install shelljs
          npm install axios

      - name: Build with pake-cli
        run: |
          node ./script/build_with_pake_cli.js
        env:
          URL: ${{ inputs.url }}
          NAME: ${{ inputs.name }}
          ICON: ${{ inputs.icon }}
          HEIGHT: ${{ inputs.height }}
          WIDTH: ${{ inputs.width }}
          FULLSCREEN: ${{ inputs.fullscreen }}
          TARGETS: ${{ inputs.targets }}
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ inputs.platform }}.zip
          path: node_modules/pake-cli/output/*
          retention-days: 3

      - name: Rust cache store
        uses: actions/cache/save@v3
        if: steps.cache_store.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}

      - name: Install AWS CLI (Ubuntu)
        if: inputs.platform == 'ubuntu-24.04'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Install AWS CLI (macOS)
        if: inputs.platform == 'macos-latest'
        run: |
          brew install awscli

      - name: Install AWS CLI (Windows)
        if: inputs.platform == 'windows-latest'
        shell: powershell
        run: |
          Invoke-WebRequest "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
          Start-Process msiexec.exe -Wait -ArgumentList '/i AWSCLIV2.msi /quiet'

      - name: List output files
        if: inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest'
        run: ls -lh node_modules/pake-cli/output/

      - name: List output files (Windows)
        if: inputs.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path node_modules/pake-cli/output | Format-List
        shell: pwsh

      #      - name: Compress output files into zip (Linux/macOS)
      #        if: inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest'
      #        run: |
      #          cd node_modules/pake-cli
      #          zip -r output-${{ inputs.platform }}.zip output/*
      #
      #      - name: Compress output files into zip (Windows)
      #        if: inputs.platform == 'windows-latest'
      #        run: |
      #          Compress-Archive -Path node_modules\pake-cli\output\* -DestinationPath node_modules\pake-cli\output-${{ inputs.platform }}.zip
      #        shell: pwsh

      - name: Upload to S3 (Linux/macOS)
        if: inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest'
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [[ "${{ inputs.platform }}" == "windows-latest" ]]; then
          EXT="msi"
          elif [[ "${{ inputs.platform }}" == "macos-latest" ]]; then
          EXT="dmg"
          elif [[ "${{ inputs.platform }}" == "ubuntu-24.04" ]]; then
          EXT="deb"
          else
          EXT="zip"
          fi

          echo "Uploading file with extension: $EXT"

          FILE=node_modules/pake-cli/output/${{ inputs.name }}.$EXT
          DEST=s3://app/${{ inputs.platform }}-${{ github.run_id }}.$EXT

          echo "Uploading $FILE to $DEST"
          
          aws s3 cp "$FILE" "$DEST" \
          --acl public-read \
          --region auto \
          --content-disposition "attachment; filename=install-${{ inputs.platform }}.dmg" \
          --endpoint-url https://fa2c9bb622bf29e5b634c11a6b5b7050.r2.cloudflarestorage.com

        continue-on-error: true

      # PowerShell 逻辑（Windows）
#      - name: Upload to S3 (Windows)
#        if: inputs.platform == 'windows-latest'
#        shell: pwsh
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          if ("${{ inputs.platform }}" -eq "windows-latest") {
#            $ext = "msi"
#          } elseif ("${{ inputs.platform }}" -eq "macos-latest") {
#            $ext = "dmg"
#          } elseif ("${{ inputs.platform }}" -eq "ubuntu-24.04") {
#            $ext = "deb"
#          } else {
#            $ext = "zip"
#          }
#
#          Write-Host "Uploading file with extension: $ext"
#
#          $file = "node_modules/pake-cli/output/${{ inputs.name }}.$ext"
#          $dest = "s3://app/${{ inputs.platform }}-${{ github.run_id }}.$ext"
#
#          Write-Host "Uploading $file to $dest"
#
#          aws s3 cp $file $dest `
#            --acl public-read `
#            --region auto `
#            --content-disposition "attachment; filename=install-${{ inputs.platform }}.$ext" `
#            --endpoint-url https://fa2c9bb622bf29e5b634c11a6b5b7050.r2.cloudflarestorage.com

#      - name: Notify backend via callback
#        if: ${{ inputs.callback_url }}
#        run: |
#          curl -X POST "${{ inputs.callback_url }}" \
#          -H "Content-Type: application/x-www-form-urlencoded" \
#          --data-urlencode "task_id=${{ inputs.task_id }}" \
#          --data-urlencode "run_id=${{ github.run_id }}" \
#          --data-urlencode "name=output-${{ inputs.platform }}.dmg" \
#          --data-urlencode "download_url=${{ inputs.platform }}-${{ github.run_id }}.dmg"

      # Linux/macOS 用 curl
      - name: Notify backend (Linux/macOS)
        if: ${{ inputs.callback_url }} && inputs.platform == 'ubuntu-24.04' || inputs.platform == 'macos-latest'
        run: |
          curl -X POST "${{ inputs.callback_url }}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "task_id=${{ inputs.task_id }}" \
            --data-urlencode "run_id=${{ github.run_id }}" \
            --data-urlencode "name=output-${{ inputs.platform }}.dmg" \
            --data-urlencode "download_url=${{ inputs.platform }}-${{ github.run_id }}.dmg"
        shell: bash

      # Windows 用 PowerShell
      - name: Notify backend (Windows)
        if: ${{ inputs.callback_url }} && inputs.platform == 'windows-latest'
        run: |
          $body = @{
            task_id     = "${{ inputs.task_id }}"
            run_id      = "${{ github.run_id }}"
            name        = "output-${{ inputs.platform }}.dmg"
            download_url = "${{ inputs.platform }}-${{ github.run_id }}.dmg"
          }
          Invoke-RestMethod -Uri "${{ inputs.callback_url }}" -Method POST -ContentType "application/x-www-form-urlencoded" -Body $body
        shell: pwsh
